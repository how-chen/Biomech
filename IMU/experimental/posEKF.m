function [ out ]= posEKF(gyro,accel,mag,freq,gyroNoise,gyroBias,accelNoise,magNoise,ca,cb)
% Author: Howard Chen

%Sampling Period
dT=1/freq;

velNoise = 0;
posNoise = 0; 

%Variable Initialization
A = eye(16);
P = zeros(16,16);
W = zeros(16,15);
H = zeros(6,16);

%Process Covariance Matrix
Q=eye(15);
Q(1:3,1:3) = posNoise^2.*eye(3);
Q(4:6,4:6) = velNoise^2.*eye(3);
Q(7:9,7:9) = eye(3);
Q(10:12,10:12) = gyroNoise^2.*eye(3);
Q(13:15,13:15) = gyroBias^2.*eye(3);

%Measurement Covariance Matrix
R=eye(6);
R(1:3,1:3)=accelNoise.*eye(3);
R(4:6,4:6)=magNoise.*eye(3);

%Variable constants
A(1:3,1:6) = [eye(3), dT.*eye(3)];
A(4:6,4:9) = [eye(3), dT.*eye(3)];
A(7:9,7:9) = ca.*eye(3); 
W(1:6,1:6) = eye(6);
W(7:9,7:9) = cb.*eye(3);
W(14:16,13:15)=dT.*eye(3);

x=[0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0]';
out = zeros(length(accel),16);

for i=1:length(accel)
    
    % position
    x(1) = x(1) + x(4).*dT; 
    x(2) = x(2) + x(5).*dT; 
    x(3) = x(3) + x(6).*dT; 

    % velocity
    x(4) = x(4) + x(7).*dT; 
    x(5) = x(5) + x(8).*dT; 
    x(6) = x(6) + x(9).*dT; 

    % acceleration
    x(7) = ca*x(7);
    x(8) = ca*x(8);
    x(9) = ca*x(9);
    
    % quaternions
    x(10) = x(10)+0.5*(-x(11)*(gyro(i,1)-x(14)) - x(12)*(gyro(i,2)-x(15)) - x(13)*(gyro(i,3)-x(16)))*dT;
    x(11) = x(11)+0.5*( x(10)*(gyro(i,1)-x(14)) - x(13)*(gyro(i,2)-x(15)) + x(12)*(gyro(i,3)-x(16)))*dT;
    x(12) = x(12)+0.5*( x(13)*(gyro(i,1)-x(14)) + x(10)*(gyro(i,2)-x(15)) - x(11)*(gyro(i,3)-x(16)))*dT;
    x(13) = x(13)+0.5*(-x(12)*(gyro(i,1)-x(14)) + x(11)*(gyro(i,2)-x(15)) + x(10)*(gyro(i,3)-x(16)))*dT;
    
    % normalize quaternion
    n = sqrt(x(10).^2+x(11).^2+x(12).^2+x(13).^2);
    x(10:13) = x(10:13)./n;
    
    % gyroscope bias
    x(14:16) = x(14:16);
    
    %Partial Derivatives for EKF
    A(10,10)=1;
    A(10,11)=-0.5*(gyro(i,1)-x(14))*dT;
    A(10,12)=-0.5*(gyro(i,2)-x(15))*dT;
    A(10,13)=-0.5*(gyro(i,3)-x(16))*dT;
    A(10,14)= 0.5*x(11)*dT;
    A(10,15)= 0.5*x(12)*dT;
    A(10,16)= 0.5*x(13)*dT;

    A(11,10)= 0.5*(gyro(i,1)-x(14))*dT;
    A(11,11)= 1;
    A(11,12)= 0.5*(gyro(i,3)-x(16))*dT;
    A(11,13)=-0.5*(gyro(i,2)-x(15))*dT;
    A(11,14)=-0.5*x(10)*dT;
    A(11,15)= 0.5*x(13)*dT;
    A(11,16)=-0.5*x(12)*dT;

    A(12,10)= 0.5*(gyro(i,2)-x(15))*dT;
    A(12,11)=-0.5*(gyro(i,3)-x(16))*dT;
    A(12,12)= 1;
    A(12,13)= 0.5*(gyro(i,1)-x(14))*dT;
    A(12,14)=-0.5*x(13)*dT;
    A(12,15)=-0.5*x(10)*dT;
    A(12,16)= 0.5*x(11)*dT;

    A(13,10)= 0.5*(gyro(i,3)-x(16))*dT;
    A(13,11)= 0.5*(gyro(i,2)-x(15))*dT;
    A(13,12)=-0.5*(gyro(i,1)-x(14))*dT;
    A(13,13)= 1;
    A(13,14)= 0.5*x(12)*dT;
    A(13,15)=-0.5*x(11)*dT;
    A(13,16)=-0.5*x(10)*dT;
    
    W(10,10:12) = [-0.5*x(11)*dT -0.5*x(12)*dT -0.5*x(13)*dT];
    W(11,10:12) = [ 0.5*x(10)*dT -0.5*x(13)*dT  0.5*x(12)*dT];
    W(12,10:12) = [ 0.5*x(13)*dT  0.5*x(10)*dT -0.5*x(11)*dT];
    W(13,10:12) = [-0.5*x(12)*dT  0.5*x(11)*dT  0.5*x(10)*dT];
    
    %quaternion to DCM conversion
    DCM(1,1) = x(10)^2+x(11)^2-x(12)^2-x(13)^2;
    DCM(1,2) = -2*x(10)*x(13)+2*x(11)*x(12);
    DCM(1,3) = 2*x(10)*x(12)+2*x(11)*x(13);
    DCM(2,1) = 2*x(10)*x(13)+2*x(11)*x(12);
    DCM(2,2) = x(10)^2-x(11)^2+x(12)^2-x(13)^2;
    DCM(2,3) = -2*x(10)*x(11)+2*x(12)*x(13);
    DCM(3,1) = -2*x(10)*x(12)+2*x(11)*x(13);
    DCM(3,2) = 2*x(10)*x(11)+2*x(12)*x(13);
    DCM(3,3) = x(10)^2-x(11)^2-x(12)^2+x(13)^2;
    
    % calculate mag in earth frame
    b=DCM*[mag(i,1);mag(i,2);mag(i,3)];
    b=[sqrt(b(1)^2+b(2)^2),0,b(3)];

    % Measurement Partial Derivatives
    H(1,7)  =  x(10)^2+x(11)^2-x(12)^2-x(13)^2;
    H(1,8)  =  2*x(10)*x(13)+2*x(11)*x(12);
    H(1,9)  = -2*x(10)*x(12)+2*x(11)*x(13);
    H(1,10) =  2*x(10)*x(7) + 2*x(13)*x(8) - 2*x(12)*(x(9)+9.80665);
    H(1,11) =  2*x(11)*x(7) + 2*x(12)*x(8) + 2*x(13)*(x(9)+9.80665);
    H(1,12) = -2*x(12)*x(7) + 2*x(11)*x(8) - 2*x(10)*(x(9)+9.80665);
    H(1,13) = -2*x(13)*x(7) + 2*x(10)*x(8) + 2*x(11)*(x(9)+9.80665);

    H(2,7)  = -2*x(10)*x(13)+2*x(11)*x(12);
    H(2,8)  =  x(10)^2-x(11)^2+x(12)^2-x(13)^2;
    H(2,9)  =  2*x(10)*x(11)+2*x(12)*x(13);
    H(2,10) = -2*x(13)*x(7) + 2*x(10)*x(8) + 2*x(11)*(x(9)+9.80665);
    H(2,11) =  2*x(12)*x(7) - 2*x(11)*x(8) + 2*x(10)*(x(9)+9.80665);
    H(2,12) =  2*x(11)*x(7) + 2*x(12)*x(8) + 2*x(13)*(x(9)+9.80665);
    H(2,13) = -2*x(10)*x(7) - 2*x(13)*x(8) + 2*x(12)*(x(9)+9.80665);

    H(3,7)  =  2*x(10)*x(12)+2*x(11)*x(13);
    H(3,8)  = -2*x(10)*x(11)+2*x(12)*x(13);
    H(3,9)  =  x(10)^2-x(11)^2-x(12)^2+x(13)^2;
    H(3,10) =  2*x(12)*x(7) - 2*x(11)*x(8) + 2*x(10)*(x(9)+9.80665);
    H(3,11) =  2*x(13)*x(7) - 2*x(10)*x(8) - 2*x(11)*(x(9)+9.80665);
    H(3,12) =  2*x(10)*x(7) + 2*x(13)*x(8) - 2*x(12)*(x(9)+9.80665);
    H(3,13) =  2*x(11)*x(7) + 2*x(12)*x(8) + 2*x(13)*(x(9)+9.80665);

    H(4,10) =  2*x(10)*b(1) + 2*x(13)*b(2) - 2*x(12)*b(3);
    H(4,11) =  2*x(11)*b(1) + 2*x(12)*b(2) + 2*x(13)*b(3);
    H(4,12) = -2*x(12)*b(1) + 2*x(11)*b(2) - 2*x(10)*b(3);
    H(4,13) = -2*x(13)*b(1) + 2*x(10)*b(2) + 2*x(11)*b(3);
    
    H(5,10) = -2*x(13)*b(1) + 2*x(10)*b(2) + 2*x(11)*b(3);
    H(5,11) =  2*x(12)*b(1) - 2*x(11)*b(2) + 2*x(10)*b(3);
    H(5,12) =  2*x(11)*b(1) + 2*x(12)*b(2) + 2*x(13)*b(3);
    H(5,13) = -2*x(10)*b(1) - 2*x(13)*b(2) + 2*x(12)*b(3);
    
    H(6,10) =  2*x(12)*b(1) - 2*x(11)*b(2) + 2*x(10)*b(3);
    H(6,11) =  2*x(13)*b(1) - 2*x(10)*b(2) - 2*x(11)*b(3);
    H(6,12) =  2*x(10)*b(1) + 2*x(13)*b(2) - 2*x(12)*b(3);
    H(6,13) =  2*x(11)*b(1) + 2*x(12)*b(2) + 2*x(13)*b(3);

    %Kalman Update
    P=A*P*A'+W*Q*W';
    K=P*H'*(H*P*H'+R)^-1;
    x=x+K*([accel(i,:)';mag(i,:)']-[DCM'*[x(7);x(8);x(9)+9.80665];DCM'*b']);
    P=(eye(16)-K*H)*P;
    
    %normalize quaternion
    n=sqrt(x(10).^2+x(11).^2+x(12).^2+x(13).^2);
    x(10:13)=x(10:13)./n;
    out(i,:)=x';
end
end
